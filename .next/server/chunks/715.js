"use strict";exports.id=715,exports.ids=[715],exports.modules={4484:(e,t,n)=>{/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(9885),u="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},o=r.useState,a=r.useEffect,s=r.useLayoutEffect,i=r.useDebugValue;function checkIfSnapshotChanged(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!u(e,n)}catch(e){return!0}}var c="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=o({inst:{value:n,getSnapshot:t}}),u=r[0].inst,c=r[1];return s(function(){u.value=n,u.getSnapshot=t,checkIfSnapshotChanged(u)&&c({inst:u})},[e,n,t]),a(function(){return checkIfSnapshotChanged(u)&&c({inst:u}),e(function(){checkIfSnapshotChanged(u)&&c({inst:u})})},[e]),i(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:c},7768:(e,t,n)=>{/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(9885),u=n(1928),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=u.useSyncExternalStore,s=r.useRef,i=r.useEffect,c=r.useMemo,l=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,u){var f=s(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;var S=a(e,(f=c(function(){function memoizedSelector(t){if(!s){if(s=!0,e=t,t=r(t),void 0!==u&&d.hasValue){var n=d.value;if(u(n,t))return a=n}return a=t}if(n=a,o(e,t))return n;var i=r(t);return void 0!==u&&u(n,i)?(e=t,n):(e=t,a=i)}var e,a,s=!1,i=void 0===n?null:n;return[function(){return memoizedSelector(t())},null===i?void 0:function(){return memoizedSelector(i())}]},[t,n,r,u]))[0],f[1]);return i(function(){d.hasValue=!0,d.value=S},[S]),l(S),S}},1928:(e,t,n)=>{e.exports=n(4484)},6122:(e,t,n)=>{e.exports=n(7768)},9715:(e,t,n)=>{n.d(t,{Ue:()=>create});let createStoreImpl=e=>{let t;let n=new Set,setState=(e,r)=>{let u="function"==typeof e?e(t):e;if(!Object.is(u,t)){let e=t;t=(null!=r?r:"object"!=typeof u||null===u)?u:Object.assign({},t,u),n.forEach(n=>n(t,e))}},getState=()=>t,r={setState,getState,getInitialState:()=>u,subscribe:e=>(n.add(e),()=>n.delete(e)),destroy:()=>{console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."),n.clear()}},u=t=e(setState,getState,r);return r},createStore=e=>e?createStoreImpl(e):createStoreImpl;var r=n(9885),u=n(6122);let{useDebugValue:o}=r,{useSyncExternalStoreWithSelector:a}=u,s=!1,identity=e=>e,createImpl=e=>{"function"!=typeof e&&console.warn("[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.");let t="function"==typeof e?createStore(e):e,useBoundStore=(e,n)=>(function(e,t=identity,n){n&&!s&&(console.warn("[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"),s=!0);let r=a(e.subscribe,e.getState,e.getServerState||e.getInitialState,t,n);return o(r),r})(t,e,n);return Object.assign(useBoundStore,t),useBoundStore},create=e=>e?createImpl(e):createImpl}};